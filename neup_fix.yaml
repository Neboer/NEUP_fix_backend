openapi: 3.0.0
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
info:
  version: "1.0.0"
  title: 先锋硬件维修系统后端
  description: NEUP_fix后端文档，所有时间字符串统一采用ISO格式，schema中以date-time标出。
paths:
  /announcement:
    get:
      tags:
        - 公告
      description: 返回所有公告组成的列表。注意，公告只能一次性全部取得。公告包含最多一张图片和一些文字。
      operationId: getAnnouncement
      responses:
        '200':
          description: 返回所有公告。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    annid:
                      type: string
                      description: 公告的统一编号
                      example: "SASI12d4s5e6dfsd2"
                    anntime:
                      type: string
                      description: 公告的发布时间
                      format: 'date-time'
                      example: 2019-08-12T07:05:28.826Z
                    text:
                      type: string
                      example: "Only my railgun!"
                    image:
                      type: string
                      format: 'uri'
                      example: "https://camo.githubusercontent.com/0a418b2480838f49dd7225e1f29df77753a8ab96/687474703a2f2f67657477616c6c7061706572732e636f6d2f77616c6c70617065722f66756c6c2f302f652f332f3932333239332d6e65772d656d696c792d7468652d737472616e67652d77616c6c70617065722d3236373678313434302e6a7067"
    post:
      security:
        - cookieAuth: [Admin]
      tags:
        - 公告
      operationId: addAnnouncement
      description: 增加一条公告
      requestBody:
        description: 增加的公告内容，可以仅有文字。注意公告的id是ObjectId，不同于数字编号id。
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                image:
                  type: string
              required:
                [text]
      responses:
        '200':
          description: 提交成功
        '400':
          description: 请求格式错误
        '401':
          description: 请求需要登录
        '405':
          description: 请求所需权限不够
  /announcement/{annid}:
    patch:
      tags:
        - 公告
      security:
        - cookieAuth: [Admin]
      parameters:
        - in: path
          name: annid
          required: true
          description: 要更新的公告的编号
          schema:
            type: string
      requestBody:
        description: 在二者中选择至少一个属性进行修改
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example:
                    onee-sama!!
                image:
                  type: string
                  format: 'uri'
                  example: "https://camo.githubusercontent.com/0a418b2480838f49dd7225e1f29df77753a8ab96/687474703a2f2f67657477616c6c7061706572732e636f6d2f77616c6c70617065722f66756c6c2f302f652f332f3932333239332d6e65772d656d696c792d7468652d737472616e67652d77616c6c70617065722d3236373678313434302e6a7067"
      responses:
        '200':
          description: 修改成功
        '400':
          description: 请求格式错误
        '401':
          description: 请求需要登录
        '405':
          description: 请求所需权限不够
        '404':
          description: 找不到修改的目标
    delete:
      tags:
        - 公告
      security:
        - cookieAuth: [Admin]
      description: 删除一个公告
      parameters:
        - in: path
          name: annid
          description: 待删除公告的annid
          schema:
            type: string
            example: "sddf1edf-asde54f5e2d-assssdf"
      responses:
        '204':
          description: 删除成功
        '404':
          description: 找不到删除的目标
        '405':
          description: 请求的权限不够
        '400':
          description: 请求格式错误
  /user/{userid}:
    # user表有一个使命，就是保存用户的权限。权限的查询和用户的查询一样，都是是游客开放的。但是仅仅硬件部管理员可以修改某个用户的“权限”属性，普通用户自身只能修改自己的其他属性。
    # 用户表在用户首次登录的时候会插入一条。默认用户的权限仅仅是user，但是管理员可以变更这个默认赋予的权限。
    get:
      description: 返回对应的用户信息
      tags:
        - 用户信息
      parameters:
        - in: path
          name: userid
          required: true
          description: 查询一个对应id用户的基本信息
          schema:
            type: string
            example: "2018XXXX"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: 请求格式错误
        '404':
          description: 找不到请求的目标
    put:
      description: 修改一个用户的信息，只有用户自己和管理员有权限修改。
      security:
        - cookieAuth: [User, Admin]
      tags:
        - 用户信息
      parameters:
        - in: path
          name: userid
          required: true
          description: 要修改的用户的id
          schema:
            type: string
            example: "2018XXXX"
      requestBody:
        description: 修改之后的新的信息
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        "200":
          description: 修改成功
        '404':
          description: 找不到修改的目标
        '400':
          description: 请求格式错误

  /app:
    get:
      tags:
        - 维修预约
      description: 查询所有符合条件的预约并返回简要信息列表。
      parameters:
        - in: query
          name: appid
          description: 预约的编号
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'

        - in: query
          name: status
          description: 预约的状态
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/status'

        - in: query
          name: userid
          description: 用户编号
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/userid'

        - in: query
          name: app_make_time
          description: 发布时间
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/app_make_time'

        - in: query
          name: repair
          description: 维修类型
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/repair'

        - in: query
          name: device_type
          description: 设备类型
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/device_type'

        - in: query
          name: device_model
          description: 设备型号
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/device_model'
      responses:
        '200':
          description: 请求成功，返回符合查询条件的列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment_get'

    post:
      description: 提交一个预约
      tags:
        - 维修预约
      requestBody:
        description: 提交一个预约
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment_post'
      responses:
        '200':
          description: 提交成功
        '400':
          description: 请求格式错误
        '401':
          description: 请求的权限需要登录


  /app/{appid}:
    get:
      description: 返回某条预约的细节数据，用户只有权限查询自己的预约详细信息
      tags:
        - 维修预约
      security:
        - cookieAuth: [Admin, User]
      parameters:
        - in: path
          name: appid
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'
          description: 预约的编号
          required: true
      responses:
        '200':
          description: 请求成功，返回特定预约的详细信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment_detail'
        '400':
          description: 请求格式错误
        '401':
          description: 请求的权限需要登录
        '405':
          description: 请求所需权限不够

    patch:
      description: 修改某条预约，也就是更新预约的进程，比如调整一个已经提交的预约为“已接受”并为之安排时间和资源。只有硬件部才能修改。
      tags:
        - 维修预约
      security:
        - cookieAuth: [Admin]
      parameters:
        - in: path
          name: appid
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'
          description: 预约的编号
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: 在可以修改的四种属性里任选一种进行修改
              properties:
                status:
                  type: string
                  description: 预约状态，当然，不能修改成“已提交”。
                  enum:
                    - accepted
                    - successful
                    - failed
                    - canceled
                app_exec_time:
                  $ref: '#/components/schemas/Appointment_detail/properties/app_exec_time'
                member:
                  $ref: '#/components/schemas/Appointment_detail/properties/member'
                site:
                  $ref: '#/components/schemas/Appointment_detail/properties/site'
      responses:
        '200':
          description: 请求成功，修改成功。
        '401':
          description: 请求的权限需要登录
        '402':
          description: 请求的预约已经维修结束，不应该再更新状态。
        '405':
          description: 请求所需权限不够
        '404':
          description: 找不到修改的目标
        '400':
          description: 请求格式错误

    put:
      description: 更改一个已经提交的预约的内容。和提交一个新预约相同。这个是修改自己已经提交的预约的方法。用户仅可以修改自身提交的预约
      parameters:
        - in: path
          name: appid
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'
          description: 预约的编号
          required: true
      security:
        - cookieAuth: [User, Admin]
      tags:
        - 维修预约
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment_post'
      responses:
        '200':
          description: 提交成功
        '400':
          description: 请求格式错误
        '401':
          description: 请求的权限需要登录

    delete:
      description: 删除特定的预约，用户只能删除自己创建的预约
      parameters:
        - in: path
          name: appid
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'
          description: 预约的编号
          required: true
      tags:
        - 维修预约
      security:
        - cookieAuth: [User, Admin]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  example:
                    "维修人员这两天有事，暂时不能修了，还望见谅"
      responses:
        '204':
          description: 删除成功
        '404':
          description: 找不到删除的目标
        '405':
          description: 请求的权限不够
        '400':
          description: 请求格式错误

  /app/{appid}/messageboard:
    get:
      tags:
        - 留言板
      parameters:
        - in: path
          name: appid
          description: 查询指定预约编号下的所有留言信息。注意，未登录的游客或其他用户虽然不能看到预约的细节，但所有人都可以访问任意预约的留言板内容。
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'
          required: true
      responses:
        '200':
          description: 请求成功，返回留言列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message_board'
        '400':
          description: 请求格式错误

    post:
      tags:
        - 留言板
      description: 添加一条留言，需要登录
      security:
        - cookieAuth: [User]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content_text:
                  $ref: '#/components/schemas/Message_board/items/properties/content_text'
                content_image:
                  $ref: '#/components/schemas/Message_board/items/properties/content_image'
      parameters:
        - in: path
          name: appid
          description: 在该条预约下留言
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: 请求格式错误
        '401':
          description: 请求的权限需要登录

  /app/{appid}/messageboard/{mesid}:
    patch:
      tags:
        - 留言板
      security:
        - cookieAuth: [User,Admin]
      description: 修改一个留言的内容。用户只能修改自己的留言
      parameters:
        - in: path
          name: appid
          description: 待修改留言所在的预约编号
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'
          required: true
        - in: path
          name: mesid
          description: 待修改留言的全局统一编号
          schema:
            $ref: '#/components/schemas/Message_board/items/properties/mesid'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content_text:
                  $ref: '#/components/schemas/Message_board/items/properties/content_text'
                content_image:
                  $ref: '#/components/schemas/Message_board/items/properties/content_image'

      responses:
        '200':
          description: 修改成功
        '404':
          description: 找不到修改的目标
        '405':
          description: 请求的权限不够
        '400':
          description: 请求格式错误
        '401':
          description: 请求需要登录

    delete:
      tags:
        - 留言板
      security:
        - cookieAuth: [User,Admin]
      description: 删除一条留言，用户只能删除自己的留言
      parameters:
        - in: path
          name: appid
          description: 待删除留言所在的预约编号
          schema:
            $ref: '#/components/schemas/Appointment_get/properties/appid'
          required: true
        - in: path
          name: mesid
          description: 待删除留言的全局统一编号
          schema:
            $ref: '#/components/schemas/Message_board/items/properties/mesid'
          required: true
      responses:
        '204':
          description: 删除成功
        '404':
          description: 找不到删除的目标
        '405':
          description: 请求的权限不够
        '400':
          description: 请求格式错误
        '401':
          description: 请求需要登录

components:
  schemas:
    UserInfo:
      type: object
      properties:
        userid:
          description: 用户id
          type: string
          example: 2018XXXX
        name:
          description: 用户昵称
          type: string
          example: 御坂美琴
        avatar:
          description: 用户头像地址
          type: string
          format: url
          example: https://mikoto.avatar.com
        signature:
          description: 用户自我签名描述
          type: string
          example: Only my railgun!
        first_login:
          description: 用户首次注册登录的时间
          type: string
          format: 'date-time'
        identity:
          description: 用户身份描述字段。如果更新操作在请求体中有这个字段，那么请求者的权限一定要求是admin。
          type: string
          enum:
            - admin
            - user
          example: user

    Appointment_get:
      type: object
      properties:
        appid:
          type: integer
          description: 预约的编号
          example: 12
        status:
          type: string
          description: 预约状态
          enum:
            - submitted
            - accepted
            - successful
            - failed
            - canceled
        #        注意，接下来的userid和app_make_time都是history的一部分。3
        userid:
          type: string
          description: 提交预约用户的id
          example: 2018XXXX
        app_make_time:
          description: 预约信息的发布时间
          type: string
          format: 'date-time'
        repair:
          type: string
          description: 维修的类型
          example: 主板清灰
        device_type:
          type: string
          description: 设备类型
          example: laptop
        device_model:
          type: string
          description: 设备型号
          example: "DELL G3-3579"

    Appointment_post: # 这块沙雕了，post请求的时候不用带上用户id，应该根据cookie来推算。
      type: object
      properties:
        device_type:
          $ref: '#/components/schemas/Appointment_get/properties/device_type'
        device_model:
          $ref: '#/components/schemas/Appointment_get/properties/device_model'
        repair:
          $ref: '#/components/schemas/Appointment_get/properties/repair'
        describe:
          type: string
          description: 问题描述
          example: 风扇有噪音，打团很吵。
        contact:
          type: array
          description: 包括两项：联系方式名称和号码。形如例子。
          items:
            type: string
          example: [qq,1653]
        contact_time:
          type: string
          description: 用户方便联系的时间。如果用msn/irc等即时聊天工具，可以留空
          example: "周六周日下午"
        site:
          type: string
          description: 维修地点，可以选择上门和先锋204
          example: 先锋204

    Appointment_detail:
      type: object
      description: 一个预约的详细信息，包括Appointment_get中的基本信息。
      properties:
        appid:
          $ref: '#/components/schemas/Appointment_get/properties/appid'
        status:
          $ref: '#/components/schemas/Appointment_get/properties/status'
        history:
          description: 每个状态变更的历史记录。
          type: array
          items:
            type: object
            properties:
              status:
                description: 变更后的状态。用户提交以后，会有一个提交的初始状态。注意这里的status还会在history的末尾再出现一次。
                type: string
                enum:
                  - submitted
                  - accepted
                  - successful
                  - failed
                  - canceled
                example: 'submitted'
              userid:
                description: 变更状态的人的id，如果只有一个，那就是提交预约的人。
                type: string # 用户id都是字符串
                example: 20183XXX
              time:
                description: 变更状态的时间
                type: string
                format: 'date-time'
              cancel_reason:
                description: 取消原因。只有当数组中一项的status为canceled时，才会同时具有该条属性。
                type: string
                required: false
                example: 这个问题太严重，我们缺少专业的设备，无法维修。（只有当数组中一项的status为canceled时，才会同时具有该条属性。）
        #        我们不要什么创建时间和创建人了，我们只需要history就可以了。
        repair:
          $ref: '#/components/schemas/Appointment_get/properties/repair'
        device_type:
          $ref: '#/components/schemas/Appointment_get/properties/device_type'
        device_model:
          $ref: '#/components/schemas/Appointment_get/properties/device_model'
        describe:
          $ref: '#/components/schemas/Appointment_post/properties/describe'
        contact:
          $ref: '#/components/schemas/Appointment_post/properties/contact'
        contact_time:
          $ref: '#/components/schemas/Appointment_post/properties/contact_time'
        app_exec_time:
          description: 预约好的维修时间
          type: string
          format: 'date-time'
          example: '2019-08-12T07:05:28.826Z'
        member:
          description: 安排的维修人员，注意这个仅仅是字符串，并不是数组。
          type: string
          example: '炮姐，黑子'
        site:
          $ref: '#/components/schemas/Appointment_post/properties/site'

    Message_board:
      type: array
      items:
        type: object
        properties:
          mesid:
            type: integer
            description: 当前留言在全部留言中的编号，也是留言的唯一id
            example: 25
          appid:
            type: integer
            description: 留言的预约编号
            example: 12
          userid:
            type: string
            description: 留言用户id
            example: 2018XXXX
          content_text:
            type: string
            description: 留言板内容
            example: 最喜欢姐姐大人了
          content_image:
            type: array
            description: 该条留言所附有的图片url，保存在一个数组中
            items:
              type: string
              description: 用户上传图片的地址
              format: 'uri'
              example: "https://www.urlshare.cn/12d5Sdf4e8aPsdf1235e"
          time:
            type: string
            format: 'date-time'
            description: 留言发布时间
            example: '2019-08-12T07:05:28.826Z'

  responses:
    '200':
      description: 请求成功，修改成功。
    '401':
      description: 请求的权限需要登录
    '405':
      description: 请求所需权限不够
    '404':
      description: 找不到修改的目标
    '400':
      description: 请求格式错误


  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID


# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/NEUP-Net-Depart/NEUP_fix/1.0.0